# logstash config

input {
  file {
    path => "/home/nutanix/data/rm_data/**/resource_mon*"
    # In case scavenger has compressed any file.
    exclude => "*.gz"
    # Default value is end.
    start_position => "beginning"
    # Default value is 3600. Setting a lower value since files are not
    # being updated.
    close_older => 300
  }
}

filter {
  if ( [message] =~ "^# " ) {
    # Metadata rows.
    if ( [message] =~ "^# TIMESTAMP: " ) {
      # # TIMESTAMP: 1478548433 20161107_115353
      # Skip this metadata since each event has its own timestamp.
      drop {  }
    } else if ( [message] =~ "^# Release version: " ) {
      # # Release version: el6-release-euphrates-5.0-stable-bfe91c28cbf6a9aa0c9a1fad832b848036ec525d
      grok {
        match => { "message" => "# Release version: %{USERNAME:release_version}" }
        # Message contains the entire line.
        remove_field => [ "message" ]
      }
    } else if ( [message] =~ "^# System memory: total \(kB\):" ) {
      # # System memory: total (kB): 33739214
      grok {
        match => { "message" => "# System memory: total \(kB\): %{POSINT:system_memory_kB:int}" }
        remove_field => [ "message" ]
      }
    } else if ( [message] =~ "^# available \(kB\): " ) {
      # # available (kB): 1478548433,2816897
      grok {
        match => { "message" => "# available \(kB\): %{NONNEGINT:timestamp},%{NONNEGINT:available_memory_kB:int}" }
        remove_field => [ "message" ]
      }
    } else if ( [message] =~ "^# free \(kB\): " ) {
      # # free (kB): 1478548433,819023
      grok {
        match => { "message" => "# free \(kB\): %{NONNEGINT:timestamp},%{NONNEGINT:free_memory_kB:int}" }
        remove_field => [ "message" ]
      }
    }
    date {
      # Elasticsearch's @timestamp field is updated with the value in
      # timestamp field of the event.
      match => [ "timestamp", "UNIX" ]
      # timestamp containing the epoch in string is not required.
      remove_field => [ "timestamp" ]
    }
  } else if ( [message] =~ "^ip," ) {
    # ip,uid,pid,ppid,name,pss (kB),uss (kB),rss (kB),vms (kB),swap (kB),num_fds,leader,timestamp
    # Skip csv header row.
    drop {  }
  } else {
    csv {
      columns => [
        "ip",
        "uid",
        "pid",
        "ppid",
        "name",
        "pss(kB)",
        "uss(kB)",
        "rss(kB)",
        "vms(kB)",
        "swap(kB)",
        "num_fds",
        "leader",
        "timestamp"
      ]
      convert => {
        "pid" => "integer"
        "ppid" => "integer"
        "pss(kB)" => "integer"
        "uss(kB)" => "integer"
        "rss(kB)" => "integer"
        "vms(kB)" => "integer"
        "swap(kB)" => "integer"
        "num_fds" => "integer"
        "leader" => "boolean"
        "timestamp" => "date_time"
      }
      # Message contains the entire comma-separated line.
      remove_field => [ "message" ]
    }
    date {
      match => [ "timestamp", "UNIX" ]
      # Elasticsearch's @timestamp field is updated with the value in
      # timestamp field of the event.
      # timestamp containing the epoch in string is not required.
      remove_field => [ "timestamp" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["localhost"]
    index => "resource_mon"
  }
}
